{"version":3,"sources":["movies_metadata.csv","movies.ts","moviePredictor.ts","movieVoter.ts","ShowMovie.tsx","ShowMovieList.tsx","ShowTree.tsx","store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiKey","genresIdToGenre","configuration","a","fetch","req","json","getMoviePosterURL","m","id","path","poster_path","config","images","secure_base_url","poster_sizes","getGenresId","genres","map","g","toString","getAllGenres","Object","values","movies","getMovies","d3","moviesMetadata","df","parseInt","budget","popularity","JSON","parse","replace","name","title","runtime","parseFloat","voteAverage","vote_average","posterPath","sort","b","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","getMoviesToRank","currentMoviesToRank","rankedMovies","moviesToRank","slice","i","includes","filter","nextMovies","pop","ACTION_UPDATE_MODEL","movieToRow","movie","updateModel","votes","type","ACTION_MOVIE_VOTE","ACTION_SET_MOVIES_TO_VOTE","setMovieVote","movieId","vote","setMoviesToVote","updateMovieVote","dispatch","getState","state","moviesToVote","movieVoter","keys","useStyles","makeStyles","theme","createStyles","root","display","width","height","details","flexDirection","content","flex","ShowMovie","props","useState","posterURL","setPosterURL","moviePredictor","useSelector","classes","useDispatch","n","prediction","model","predict","Card","className","CardContent","CardMedia","component","alt","image","Typography","variant","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","CardActions","IconButton","aria-label","onClick","style","backgroundColor","borderRadius","ShowMovieList","Button","forEach","Grid","container","spacing","item","xs","uuid","require","ShowTree","graph","nodes","edges","addBranchToGraph","node","graphNode","label","columns","splitColumn","push","left","addNodeToGraph","right","splitValue","from","to","distribution","addLeafToGraph","tree","options","interaction","dragNodes","layout","hierarchical","enabled","direction","sortMethod","color","physics","rootReducer","combineReducers","action","fromEntries","entries","X","find","y","DTRegression","train","console","log","toJSON","store","createStore","applyMiddleware","thunk","App","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86800f5b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/movies_metadata.a9b44b26.csv\";","import moviesMetadata from './movies_metadata.csv'\nimport * as d3 from \"d3\";\n\nexport interface Movie {\n  id: number\n  budget: number\n  popularity: number\n  genres: number[]\n  title: string\n  runtime: number\n  voteAverage: number\n  posterPath: string | undefined\n}\n\nexport interface Genre {\n  id: number\n  name: string\n}\nconst apiBaseURL = 'https://api.themoviedb.org/3/'\nconst apiKey = 'e930b9cc0693a6cff131c4a9ca0bd15f'\nconst genresIdToGenre: {[key: string]: Genre} = {}\nconst configuration = (async () => {\n  const req = await fetch(`${apiBaseURL}configuration?api_key=${apiKey}`)\n  return await req.json()\n})()\n\nexport async function getMoviePosterURL(m: Movie): Promise<string> {\n  const req = await fetch(`https://api.themoviedb.org/3/movie/${m.id}?api_key=${apiKey}`)\n  const path = (await req.json()).poster_path\n  const config = await configuration\n  return `${config.images.secure_base_url}/${config.images.poster_sizes[4]}${path}`\n}\nfunction getGenresId(genres: Genre[]): number[] {\n  return genres.map((g) => {\n    genresIdToGenre[g.id.toString()] = g\n    return g.id\n  })\n}\n\nexport function getGenres(genres: number[]): Genre[] {\n  return genres.map((g) => genresIdToGenre[g.toString()])\n}\nexport function getAllGenres(): Genre[] {\n  return Object.values(genresIdToGenre)\n}\n\nlet movies: null | Movie[] = null;\nexport async function getMovies(): Promise<Movie[]> {\n  if (movies) return movies\n  const df = (await d3.csv(moviesMetadata)).map((m) => { \n  return {\n    id: parseInt(m.id || '0'),\n    budget: parseInt(m.budget || '0'),\n    popularity: parseInt(m.popularity || '0'),\n    genres: getGenresId(JSON.parse((m.genres || '[]').replace(/'/g, '\"')).map((g: Genre) => {\n      g.name = g.name.replace(/\"/g, \"'\")\n      return g\n    })),\n    title: m.title || '',\n    runtime: parseFloat(m.runtime || '0'),\n    voteAverage: parseFloat(m.vote_average || '0'),\n    posterPath: m.poster_path,\n  }})\n  movies = df.sort((a, b) => d3.descending(a.popularity, b.popularity))\n  return movies\n}\n\n// https://stackoverflow.com/a/2450976\nfunction shuffle(array: any[]): any[] {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nconst moviesToRankNumForward = 100\nconst moviesToRankNumDisplay = 9\nexport async function getMoviesToRank(currentMoviesToRank: Movie[], rankedMovies: string[]): Promise<Movie[]> {\n  const moviesToRank: (Movie | null)[] = currentMoviesToRank.slice()\n  for (let i = 0; i < moviesToRankNumDisplay; i++) {\n    if (moviesToRank[i]) {\n      const id = (moviesToRank[i] as Movie).id\n      if (rankedMovies.includes(id.toString())) {\n        moviesToRank[i] = null\n      }\n    } else {\n      moviesToRank[i] = null\n    }\n  }\n  const nextMovies = shuffle((await getMovies())\n    .filter((m) => !rankedMovies.includes(m.id.toString()))\n    .filter((m) => !currentMoviesToRank.map((m) => m.id).includes(m.id))\n    .slice(0, moviesToRankNumForward))\n  for (let i = 0; i < moviesToRankNumDisplay; i++) {\n    if (!moviesToRank[i]) {\n      moviesToRank[i] = nextMovies.pop()\n    }\n  }\n  return moviesToRank as Movie[]\n}\n","import { DecisionTreeRegression as DTRegression, TreeNode } from 'ml-cart';\nimport { Movie, Genre } from './movies'\n\nconst ACTION_UPDATE_MODEL = 'update_model'\n\n\nexport function movieToRow(movie: undefined | Movie, genres: Genre[]) {\n  return genres.map((g) => movie && movie.genres.includes(g.id) ? 1 : 0)\n}\n\nexport function moviePredictorReducer(state: {\n  model: DTRegression | null,\n  tree: TreeNode,\n  columns: string[],\n} = {\n  model: null,\n  tree: { distribution: 0.5 },\n  columns: [],\n}, action: {\n  type: string,\n  movies: Movie[],\n  genres: Genre[],\n  votes: {[movieId: string]: number},\n}) {\n  if (action.type === ACTION_UPDATE_MODEL) {\n    const votes = Object.fromEntries(\n      Object.entries(action.votes)\n        .filter(([_1, v]) => v !== 0)\n        .map(([k, v]) => [k, (v + 1) / 2])\n    )\n    if (!Object.values(votes).length) {\n      return state\n    }\n    const X = Object.keys(votes).map((movieId) => {\n      const movie = action.movies.find((m) => m.id.toString() === movieId)\n      return movieToRow(movie, action.genres)\n    })\n    const y = Object.values(votes)\n    const columns = action.genres.map((g) => g.name)\n    const model = new DTRegression()\n    model.train(X, y)\n    console.log(model.toJSON())\n    return {\n      model,\n      tree: model.toJSON().root,\n      columns,\n    }\n  }\n  return state\n}\n\nexport function updateModel(votes: {[movieId: string]: number} = {}, movies: Movie[], genres: Genre[]) {\n  return {\n    type: ACTION_UPDATE_MODEL,\n    votes,\n    movies,\n    genres,\n  }\n}\n","import { Movie, getMoviesToRank, getMovies, getAllGenres } from './movies'\nimport { RootState } from './store'\nimport { updateModel } from './moviePredictor'\n\nconst ACTION_MOVIE_VOTE = 'set_movie_vote'\nconst ACTION_SET_MOVIES_TO_VOTE = 'set_movies_to_vote'\n\nexport function movieVoterReducer(state: {[movieId: string]: number} = {}, action: any) {\n  if (typeof state !== typeof undefined && action.type === ACTION_MOVIE_VOTE) {\n    state = Object.fromEntries(Object.entries(state))\n    const {movieId, vote} = action\n    state[movieId.toString()] = vote\n    return state\n  }\n  return state\n}\n\nfunction setMovieVote(movieId: number, vote: number) {\n  return {\n    type: ACTION_MOVIE_VOTE,\n    movieId,\n    vote,\n  }\n}\n\nexport function moviesToVoteReducer(state: Movie[] = [], action: any): Movie[] {\n  if (typeof state !== typeof undefined && action.type === ACTION_SET_MOVIES_TO_VOTE) {\n    return action.movies.slice()\n  }\n  return state\n}\n\nexport function setMoviesToVote(movies: Movie[]) {\n  return {\n    type: ACTION_SET_MOVIES_TO_VOTE,\n    movies,\n  }\n}\n\nexport function updateMovieVote(movieId: number, vote: number) {\n  return function(dispatch: any, getState: () => RootState) {\n    return (async () => {\n      await dispatch(setMovieVote(movieId, vote))\n      const state = getState()\n      const movies = state.moviesToVote;\n      const votes = state.movieVoter\n      await dispatch(setMoviesToVote(await getMoviesToRank(movies, Object.keys(votes))))\n      dispatch(updateModel(votes, await getMovies(), getAllGenres()))\n    })()\n  }\n}\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport Typography from '@material-ui/core/Typography';\n\nimport { Movie, getMoviePosterURL, getAllGenres } from './movies'\nimport { updateMovieVote } from './movieVoter'\nimport { movieToRow } from './moviePredictor'\nimport { RootState } from './store'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      width: 174,\n      height: 300\n    },\n    details: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    content: {\n      flex: '1 0 auto',\n    },\n  })\n)\n\nfunction format(n: number) {\n    return Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(n)\n}\nfunction ShowMovie(props: {movie: Movie}) {\n  const { movie } = props\n  const genres = getAllGenres()\n  const [posterURL, setPosterURL] = useState<string | null>()\n  const moviePredictor = useSelector((state: RootState) => state.moviePredictor)\n  useState(() => {\n    (async () => {\n      setPosterURL(await getMoviePosterURL(movie))\n    })()\n  })\n  const classes = useStyles();\n  const dispatch = useDispatch()\n\n  async function vote(vote: number) {\n    dispatch(updateMovieVote(movie.id, vote))\n  }\n  const prediction = moviePredictor.model ? moviePredictor.model.predict([movieToRow(movie, genres)])[0] : 0.5\n  return (\n    <Card className={classes.root}>\n      <div className={classes.details}>\n        <CardContent className={classes.content}>\n          {posterURL && <CardMedia\n            component=\"img\"\n            alt={movie.title}\n            height=\"140\"\n            image={posterURL}\n            title=\"\"\n            />}\n          <Typography variant=\"body2\" component=\"p\">\n            {movie.title}\n          </Typography>\n          <Typography variant=\"body2\" component=\"p\">\n            {format(prediction)}\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <IconButton aria-label=\"me gustó\" onClick={() => vote(1)}>\n            <ThumbUpIcon style={prediction > 0.5 ? {backgroundColor: 'rgba(0, 255, 0, 0.7)', borderRadius: '50%'} : {}}/>\n          </IconButton>\n          <IconButton aria-label=\"no me gustó\" onClick={() => vote(-1)}>\n            <ThumbDownIcon style={prediction < 0.5 ? {backgroundColor: 'rgba(255, 0, 0, 0.7)', borderRadius: '50%'} : {}}/>\n          </IconButton>\n          <IconButton aria-label=\"ocultar\" onClick={() => vote(0)}>\n            <VisibilityOffIcon />\n          </IconButton>\n        </CardActions>\n      </div>\n    </Card>\n  )\n}\nexport default ShowMovie\n","import React, {useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { getMoviesToRank } from './movies'\nimport { setMoviesToVote } from './movieVoter'\nimport './App.css';\nimport ShowMovie from './ShowMovie';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { RootState } from './store'\nimport { updateMovieVote } from './movieVoter'\n\nexport default function ShowMovieList() {\n  const movies = useSelector((state: RootState) => state.moviesToVote);\n  const votes = useSelector((state: RootState) => state.movieVoter);\n  const dispatch = useDispatch();\n  useState(() => {\n    (async () => {\n      if (!movies.length) {\n        dispatch(setMoviesToVote(await getMoviesToRank([], Object.keys(votes))))\n      }\n    })()\n  })\n  const hideAll = () => {\n    movies.forEach((movie) => dispatch(updateMovieVote(movie.id, 0)))\n  }\n  return (\n    <div>\n      {movies && <Button onClick={() => hideAll()}>Hide all</Button>}\n      {<Grid container spacing={3}>\n        {movies.map((m) => (\n          <Grid item key={m.id} xs={4}>\n            <ShowMovie key={m.id.toString()} movie={m} />\n          </Grid>\n        ))}\n      </Grid>}\n    </div>\n  );\n}\n","import React from 'react'\nimport Graph from \"react-graph-vis\";\nimport { useSelector } from 'react-redux'\nimport { RootState } from './store'\nimport { TreeNode, TreeBranch, TreeLeaf } from 'ml-cart'\nconst { uuid } = require('uuidv4');\n\nfunction format(n: number) {\n    return Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(n)\n}\nexport default function ShowTree() {\n  const moviePredictor = useSelector((state: RootState) => state.moviePredictor)\n  let id = 0\n  const graph: {\n    nodes: {id: number, label: string}[],\n    edges: {from: number, to: number, label: string}[],\n  } = {\n    nodes: [],\n    edges: [],\n  };\n  const addBranchToGraph = (node: TreeBranch) => {\n    const graphNode = {id: ++id, label: `${moviePredictor.columns[node.splitColumn]}`}\n    graph.nodes.push(graphNode)\n    const left = addNodeToGraph(node.left)\n    const right = addNodeToGraph(node.right)\n    const splitValue = format(node.splitValue)\n    graph.edges.push({from: graphNode.id, to: left.id, label: `< ${splitValue}`})\n    graph.edges.push({from: graphNode.id, to: right.id, label: `>= ${splitValue}`})\n    return graphNode\n  }\n  const addLeafToGraph = (node: TreeLeaf) => {\n    const graphNode = {id: ++id, label: `${format(node.distribution)}`}\n    graph.nodes.push(graphNode)\n    return graphNode\n  }\n  const addNodeToGraph = (node: TreeNode) => {\n    if ((node as TreeBranch).left) {\n      return addBranchToGraph(node as TreeBranch)\n    } else {\n      return addLeafToGraph(node as TreeLeaf)\n    }\n  }\n  addNodeToGraph(moviePredictor.tree)\n\n  const options = {\n    interaction: {\n      dragNodes: false,\n    },\n    layout: {\n      hierarchical: {\n        enabled: true,\n        direction: 'UD',\n        sortMethod: 'directed',\n      }\n    },\n    edges: {\n      color: \"#000000\"\n    },\n    height: \"500px\",\n    physics: { enabled: false },\n  };\n  return (\n    <Graph\n      key={uuid()}\n      graph={graph}\n      options={options}\n    />\n  )\n}\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { movieVoterReducer, moviesToVoteReducer } from './movieVoter'\nimport { moviePredictorReducer } from './moviePredictor'\n\nlet rootReducer = combineReducers({\n  movieVoter: movieVoterReducer,\n  moviesToVote: moviesToVoteReducer,\n  moviePredictor: moviePredictorReducer,\n})\n\nlet store = createStore(rootReducer, applyMiddleware(thunk));\nexport type RootState = ReturnType<typeof store.getState>\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux'\n\nimport './App.css';\nimport ShowMovieList from './ShowMovieList';\nimport ShowTree from './ShowTree';\nimport Container from '@material-ui/core/Container';\nimport store from './store'\n\nfunction App() {\n  return (\n    <Container maxWidth=\"lg\">\n      <Provider store={store}>\n        <div className=\"container\">\n          <Container maxWidth=\"sm\">\n            <ShowMovieList />\n          </Container>\n          <ShowTree />\n        </div>\n      </Provider>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}