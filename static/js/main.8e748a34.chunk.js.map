{"version":3,"sources":["movies_metadata.csv","movies.ts","moviePredictor.ts","movieVoter.ts","ShowMovie.tsx","ShowMovieList.tsx","ShowTree.tsx","VotedList.tsx","store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiKey","genresIdToGenre","configuration","a","fetch","req","json","m","id","path","poster_path","config","images","secure_base_url","poster_sizes","getGenresId","genres","map","g","toString","getAllGenres","Object","values","movies","getAllMovies","d3","moviesMetadata","df","parseInt","budget","popularity","JSON","parse","replace","name","title","runtime","parseFloat","voteAverage","vote_average","posterPath","sort","b","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","getMoviesToRank","currentMoviesToRank","rankedMovies","moviesToRank","slice","i","includes","filter","nextMovies","pop","ACTION_UPDATE_MODEL","movieToRow","movie","concat","getColumns","updateModel","votes","type","ACTION_MOVIE_VOTE","ACTION_SET_MOVIES_TO_VOTE","setMovieVote","movieId","vote","setMoviesToVote","updateMovieVote","dispatch","getState","state","moviesToVote","movieVoter","keys","useStyles","makeStyles","theme","createStyles","root","display","width","height","details","flexDirection","content","flex","ShowMovie","props","useState","posterURL","setPosterURL","moviePredictor","useSelector","useEffect","isMounted","getMoviePosterURL","then","data","classes","useDispatch","n","prediction","model","predict","Card","className","CardContent","CardMedia","component","alt","image","Typography","variant","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","CardActions","IconButton","aria-label","onClick","style","backgroundColor","borderRadius","ShowMovieList","Button","forEach","Grid","container","spacing","item","xs","v4","require","ShowTree","graph","nodes","edges","addBranchToGraph","node","graphNode","label","columns","splitColumn","push","left","addNodeToGraph","right","splitValue","from","to","distribution","addLeafToGraph","tree","options","interaction","dragNodes","layout","hierarchical","enabled","direction","sortMethod","color","physics","VotedList","setMovies","undefined","ms","fromEntries","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","entries","m1","m2","localeCompare","scope","unvote","rootReducer","combineReducers","action","X","find","y","DTRegression","train","toJSON","store","createStore","applyMiddleware","thunk","App","Container","maxWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e748a34.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/movies_metadata.a9b44b26.csv\";","import moviesMetadata from './movies_metadata.csv'\nimport * as d3 from \"d3\";\n\nexport interface Movie {\n  id: number\n  budget: number\n  popularity: number\n  genres: number[]\n  title: string\n  runtime: number\n  voteAverage: number\n  posterPath: string | undefined\n}\n\nexport interface Genre {\n  id: number\n  name: string\n}\nconst apiBaseURL = 'https://api.themoviedb.org/3/'\nconst apiKey = 'e930b9cc0693a6cff131c4a9ca0bd15f'\nconst genresIdToGenre: {[key: string]: Genre} = {}\nconst configuration = (async () => {\n  const req = await fetch(`${apiBaseURL}configuration?api_key=${apiKey}`)\n  return await req.json()\n})()\n\nexport async function getMoviePosterURL(m: Movie): Promise<string> {\n  const req = await fetch(`https://api.themoviedb.org/3/movie/${m.id}?api_key=${apiKey}`)\n  const path = (await req.json()).poster_path\n  const config = await configuration\n  return `${config.images.secure_base_url}/${config.images.poster_sizes[4]}${path}`\n}\nfunction getGenresId(genres: Genre[]): number[] {\n  return genres.map((g) => {\n    genresIdToGenre[g.id.toString()] = g\n    return g.id\n  })\n}\n\nexport function getGenres(genres: number[]): Genre[] {\n  return genres.map((g) => genresIdToGenre[g.toString()])\n}\nexport function getAllGenres(): Genre[] {\n  return Object.values(genresIdToGenre)\n}\n\nlet movies: null | Movie[] = null;\nexport async function getAllMovies(): Promise<Movie[]> {\n  if (movies) return movies\n  const df = (await d3.csv(moviesMetadata)).map((m) => { \n  return {\n    id: parseInt(m.id || '0'),\n    budget: parseInt(m.budget || '0'),\n    popularity: parseInt(m.popularity || '0'),\n    genres: getGenresId(JSON.parse((m.genres || '[]').replace(/'/g, '\"')).map((g: Genre) => {\n      g.name = g.name.replace(/\"/g, \"'\")\n      return g\n    })),\n    title: m.title || '',\n    runtime: parseFloat(m.runtime || '0'),\n    voteAverage: parseFloat(m.vote_average || '0'),\n    posterPath: m.poster_path,\n  }})\n  movies = df.sort((a, b) => d3.descending(a.popularity, b.popularity))\n  return movies\n}\n\n// https://stackoverflow.com/a/2450976\nfunction shuffle(array: any[]): any[] {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nconst moviesToRankNumForward = 100\nconst moviesToRankNumDisplay = 9\nexport async function getMoviesToRank(currentMoviesToRank: Movie[], rankedMovies: string[]): Promise<Movie[]> {\n  const moviesToRank: (Movie | null)[] = currentMoviesToRank.slice()\n  for (let i = 0; i < moviesToRankNumDisplay; i++) {\n    if (moviesToRank[i]) {\n      const id = (moviesToRank[i] as Movie).id\n      if (rankedMovies.includes(id.toString())) {\n        moviesToRank[i] = null\n      }\n    } else {\n      moviesToRank[i] = null\n    }\n  }\n  const nextMovies = shuffle((await getAllMovies())\n    .filter((m) => !rankedMovies.includes(m.id.toString()))\n    .filter((m) => !currentMoviesToRank.map((m) => m.id).includes(m.id))\n    .slice(0, moviesToRankNumForward))\n  for (let i = 0; i < moviesToRankNumDisplay; i++) {\n    if (!moviesToRank[i]) {\n      moviesToRank[i] = nextMovies.pop()\n    }\n  }\n  return moviesToRank as Movie[]\n}\n\nexport async function getMovies(movieIds: string[]): Promise<Movie[]> {\n  const allMovies = await getAllMovies()\n  return movieIds.map((id) => allMovies.find((m) => m.id.toString() === id) as Movie)\n}\n","import { DecisionTreeRegression as DTRegression, TreeNode } from 'ml-cart';\nimport { Movie, Genre } from './movies'\n\nconst ACTION_UPDATE_MODEL = 'update_model'\n\n\nexport function movieToRow(movie: Movie, genres: Genre[]): number[] {\n  return (genres.map((g) => movie.genres.includes(g.id) ? 1 : 0) as number[])\n    .concat([movie.budget, movie.popularity, movie.voteAverage])\n}\n\nconst getColumns = (genres: Genre[]) => {\n  return genres.map((g) => g.name)\n    .concat(['budget', 'popularity', 'voteAverage'])\n}\n\nexport function moviePredictorReducer(state: {\n  model: DTRegression | null,\n  tree: TreeNode,\n  columns: string[],\n} = {\n  model: null,\n  tree: { distribution: 0.5 },\n  columns: [],\n}, action: {\n  type: string,\n  movies: Movie[],\n  genres: Genre[],\n  votes: {[movieId: string]: number},\n}) {\n  if (action.type === ACTION_UPDATE_MODEL) {\n    const votes = Object.fromEntries(\n      Object.entries(action.votes)\n        .filter(([_1, v]) => v !== 0)\n        .map(([k, v]) => [k, (v + 1) / 2])\n    )\n    if (!Object.values(votes).length) {\n      return state\n    }\n    const X = Object.keys(votes).map((movieId) => {\n      const movie = action.movies.find((m) => m.id.toString() === movieId)\n      if (!movie) {\n        return getColumns(action.genres).map(() => 0)\n      }\n      return movieToRow(movie, action.genres)\n    })\n    const y = Object.values(votes)\n    const model = new DTRegression()\n    model.train(X, y)\n    return {\n      model,\n      tree: model.toJSON().root,\n      columns: getColumns(action.genres),\n    }\n  }\n  return state\n}\n\nexport function updateModel(votes: {[movieId: string]: number} = {}, movies: Movie[], genres: Genre[]) {\n  return {\n    type: ACTION_UPDATE_MODEL,\n    votes,\n    movies,\n    genres,\n  }\n}\n","import { Movie, getMoviesToRank, getAllMovies, getAllGenres } from './movies'\nimport { RootState } from './store'\nimport { updateModel } from './moviePredictor'\n\nconst ACTION_MOVIE_VOTE = 'set_movie_vote'\nconst ACTION_SET_MOVIES_TO_VOTE = 'set_movies_to_vote'\n\nexport function movieVoterReducer(state: {[movieId: string]: number} = {}, action: any) {\n  if (typeof state !== typeof undefined && action.type === ACTION_MOVIE_VOTE) {\n    state = Object.fromEntries(Object.entries(state))\n    const {movieId, vote} = action\n    if (typeof vote === typeof undefined) {\n      delete state[movieId.toString()]\n    } else {\n      state[movieId.toString()] = vote\n    }\n    return state\n  }\n  return state\n}\n\nfunction setMovieVote(movieId: number, vote: number | undefined) {\n  return {\n    type: ACTION_MOVIE_VOTE,\n    movieId,\n    vote,\n  }\n}\n\nexport function moviesToVoteReducer(state: Movie[] = [], action: any): Movie[] {\n  if (typeof state !== typeof undefined && action.type === ACTION_SET_MOVIES_TO_VOTE) {\n    return action.movies.slice()\n  }\n  return state\n}\n\nexport function setMoviesToVote(movies: Movie[]) {\n  return {\n    type: ACTION_SET_MOVIES_TO_VOTE,\n    movies,\n  }\n}\n\nexport function updateMovieVote(movieId: number, vote: number | undefined) {\n  return function(dispatch: any, getState: () => RootState) {\n    return (async () => {\n      await dispatch(setMovieVote(movieId, vote))\n      const state = getState()\n      const movies = state.moviesToVote;\n      const votes = state.movieVoter\n      await dispatch(setMoviesToVote(await getMoviesToRank(movies, Object.keys(votes))))\n      dispatch(updateModel(votes, await getAllMovies(), getAllGenres()))\n    })()\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport Typography from '@material-ui/core/Typography';\n\nimport { Movie, getMoviePosterURL, getAllGenres } from './movies'\nimport { updateMovieVote } from './movieVoter'\nimport { movieToRow } from './moviePredictor'\nimport { RootState } from './store'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      width: 174,\n      height: 300\n    },\n    details: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    content: {\n      flex: '1 0 auto',\n    },\n  })\n)\n\nfunction format(n: number) {\n    return Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(n)\n}\nfunction ShowMovie(props: {movie: Movie}) {\n  const { movie } = props\n  const genres = getAllGenres()\n  const [posterURL, setPosterURL] = useState<string | null>()\n  const moviePredictor = useSelector((state: RootState) => state.moviePredictor)\n\n  useEffect(() => {\n    let isMounted = true;\n    getMoviePosterURL(movie).then(data => {\n      if (isMounted) setPosterURL(data);\n    })\n    return () => { isMounted = false };\n  }, [movie])\n\n\n  const classes = useStyles();\n  const dispatch = useDispatch()\n\n  async function vote(vote: number) {\n    dispatch(updateMovieVote(movie.id, vote))\n  }\n  const prediction = moviePredictor.model ? moviePredictor.model.predict([movieToRow(movie, genres)])[0] : 0.5\n  return (\n    <Card className={classes.root}>\n      <div className={classes.details}>\n        <CardContent className={classes.content}>\n          {posterURL && <CardMedia\n            component=\"img\"\n            alt={movie.title}\n            height=\"140\"\n            image={posterURL}\n            title=\"\"\n            />}\n          <Typography variant=\"body2\" component=\"p\">\n            {movie.title}\n          </Typography>\n          <Typography variant=\"body2\" component=\"p\">\n            {format(prediction)}\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <IconButton aria-label=\"me gustó\" onClick={() => vote(1)}>\n            <ThumbUpIcon style={prediction > 0.5 ? {backgroundColor: 'rgba(0, 255, 0, 0.7)', borderRadius: '50%'} : {}}/>\n          </IconButton>\n          <IconButton aria-label=\"no me gustó\" onClick={() => vote(-1)}>\n            <ThumbDownIcon style={prediction < 0.5 ? {backgroundColor: 'rgba(255, 0, 0, 0.7)', borderRadius: '50%'} : {}}/>\n          </IconButton>\n          <IconButton aria-label=\"ocultar\" onClick={() => vote(0)}>\n            <VisibilityOffIcon />\n          </IconButton>\n        </CardActions>\n      </div>\n    </Card>\n  )\n}\nexport default ShowMovie\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { getMoviesToRank } from './movies'\nimport { setMoviesToVote } from './movieVoter'\nimport './App.css';\nimport ShowMovie from './ShowMovie';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { RootState } from './store'\nimport { updateMovieVote } from './movieVoter'\n\nexport default function ShowMovieList() {\n  const movies = useSelector((state: RootState) => state.moviesToVote);\n  const votes = useSelector((state: RootState) => state.movieVoter);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    (async () => {\n      if (!movies.length) {\n        dispatch(setMoviesToVote(await getMoviesToRank([], Object.keys(votes))))\n      }\n    })()\n  })\n  const hideAll = () => {\n    movies.forEach((movie) => dispatch(updateMovieVote(movie.id, 0)))\n  }\n  return (\n    <div>\n      {movies && <Button onClick={() => hideAll()}>Hide all</Button>}\n      {<Grid container spacing={3}>\n        {movies.map((m) => (\n          <Grid item key={m.id} xs={4}>\n            <ShowMovie key={m.id.toString()} movie={m} />\n          </Grid>\n        ))}\n      </Grid>}\n    </div>\n  );\n}\n","import React from 'react'\nimport Graph from \"react-graph-vis\";\nimport { useSelector } from 'react-redux'\nimport { RootState } from './store'\nimport { TreeNode, TreeBranch, TreeLeaf } from 'ml-cart'\nconst { v4 } = require('uuid');\n\nfunction format(n: number) {\n    return Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(n)\n}\nexport default function ShowTree() {\n  const moviePredictor = useSelector((state: RootState) => state.moviePredictor)\n  let id = 0\n  const graph: {\n    nodes: {id: number, label: string}[],\n    edges: {from: number, to: number, label: string}[],\n  } = {\n    nodes: [],\n    edges: [],\n  };\n  const addBranchToGraph = (node: TreeBranch) => {\n    const graphNode = {id: ++id, label: `${moviePredictor.columns[node.splitColumn]}`}\n    graph.nodes.push(graphNode)\n    const left = addNodeToGraph(node.left)\n    const right = addNodeToGraph(node.right)\n    const splitValue = format(node.splitValue)\n    graph.edges.push({from: graphNode.id, to: left.id, label: `< ${splitValue}`})\n    graph.edges.push({from: graphNode.id, to: right.id, label: `>= ${splitValue}`})\n    return graphNode\n  }\n  const addLeafToGraph = (node: TreeLeaf) => {\n    const graphNode = {id: ++id, label: `${format(node.distribution)}`}\n    graph.nodes.push(graphNode)\n    return graphNode\n  }\n  const addNodeToGraph = (node: TreeNode) => {\n    if ((node as TreeBranch).left) {\n      return addBranchToGraph(node as TreeBranch)\n    } else {\n      return addLeafToGraph(node as TreeLeaf)\n    }\n  }\n  addNodeToGraph(moviePredictor.tree)\n\n  const options = {\n    interaction: {\n      dragNodes: false,\n    },\n    layout: {\n      hierarchical: {\n        enabled: true,\n        direction: 'UD',\n        sortMethod: 'directed',\n      }\n    },\n    edges: {\n      color: \"#000000\"\n    },\n    height: \"500px\",\n    physics: { enabled: false },\n  };\n  return (\n    <Graph\n      key={v4()}\n      graph={graph}\n      options={options}\n    />\n  )\n}\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState } from './store'\nimport { Movie, getAllMovies } from './movies'\nimport { updateMovieVote } from './movieVoter'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport CancelIcon from '@material-ui/icons/Cancel';\n\nexport default function VotedList() {\n  const votes = useSelector((state: RootState) => state.movieVoter);\n  const dispatch = useDispatch()\n  const [movies, setMovies] = useState<{[id: string]: Movie}>({})\n  useState(() => {\n    (async () => {\n      const ms = await getAllMovies()\n      setMovies(Object.fromEntries(ms.map((m) => [m.id.toString(), m])))\n    })()\n  })\n  async function unvote(movieId: string) {\n    dispatch(updateMovieVote(parseInt(movieId), undefined))\n  }\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Movie</TableCell>\n            <TableCell>Vote</TableCell>\n            <TableCell>Cancel</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {Object.entries(votes).sort((m1, m2) => movies[m1[0]].title.localeCompare(movies[m2[0]].title)).map(([movieId, vote]) => (\n            movies[movieId] && <TableRow key={movieId}>\n              <TableCell component=\"th\" scope=\"row\">\n                {movies[movieId].title}\n              </TableCell>\n              <TableCell scope=\"row\">\n                {vote === 1 && <ThumbUpIcon />}\n                {vote === 0 && <VisibilityOffIcon />}\n                {vote === -1 && <ThumbDownIcon />}\n              </TableCell>\n              <TableCell scope=\"row\">\n                <IconButton aria-label=\"me gustó\" onClick={() => unvote(movieId)}>\n                  <CancelIcon />\n                </IconButton>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { movieVoterReducer, moviesToVoteReducer } from './movieVoter'\nimport { moviePredictorReducer } from './moviePredictor'\n\nlet rootReducer = combineReducers({\n  movieVoter: movieVoterReducer,\n  moviesToVote: moviesToVoteReducer,\n  moviePredictor: moviePredictorReducer,\n})\n\nlet store = createStore(rootReducer, applyMiddleware(thunk));\nexport type RootState = ReturnType<typeof store.getState>\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux'\n\nimport './App.css';\nimport ShowMovieList from './ShowMovieList';\nimport ShowTree from './ShowTree';\nimport VotedList from './VotedList';\nimport Container from '@material-ui/core/Container';\nimport store from './store'\n\nfunction App() {\n  return (\n    <Container maxWidth=\"lg\">\n      <Provider store={store}>\n        <div className=\"container\">\n          <Container maxWidth=\"sm\">\n            <ShowMovieList />\n          </Container>\n          <ShowTree />\n        </div>\n        <VotedList />\n      </Provider>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}